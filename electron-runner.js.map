{"version":3,"sources":["electron-runner.js"],"names":["finalhandler","require","http","serveStatic","freeport","path","app","BrowserWindow","ipcMain","globalShortcut","start","mode","server","createServer","mainWindow","runModeSuffix","runModeTitle","names","preloadScript","join","appFolder","__dirname","serverAddress","port","serve","req","res","customPrompt","promptResponse","on","eventRet","arg","encodeHtmlEntity","str","buf","i","length","unshift","charCodeAt","promptWindow","width","height","show","resizable","movable","alwaysOnTop","frame","val","promptHtml","title","loadURL","returnValue","event","createWindow","icon","getVersion","webPreferences","nodeIntegration","preload","webSecurity","maximize","ev","preventDefault","err","listen","register","reload","webContents","reloadIgnoringCache","openDevTools","unregister","process","platform","quit","module","exports"],"mappings":"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","file":"electron-runner.js","sourcesContent":["// Import required libraries\nconst finalhandler = require('finalhandler');\nconst http = require('http');\nconst serveStatic = require('serve-static');\nconst freeport = require('freeport');\nconst path = require('path');\nconst {app, BrowserWindow, ipcMain, globalShortcut} = require('electron');\n\n\nfunction start(mode) {\n  // The running node.js server, the main app window\n  // are all global to the function\n  const server = createServer();\n  let mainWindow;\n\n  // Useful functions\n  function runModeSuffix(mode) {\n    return mode ? ('#/' + mode) : ''\n  }\n\n  function runModeTitle(mode) {\n    const names = {\n      'code': 'Gobstones Sr.',\n      'blocks': 'Gobstones Jr.',\n      'teacher': 'Gobstones Teacher',\n    }\n    return mode ? names[mode] :'Gobstones'\n  }\n\n  function preloadScript() {\n    return path.join(appFolder(), 'electron-preload.js');\n  }\n\n  function appFolder() {\n    return __dirname;\n  }\n\n  function serverAddress(port) {\n    return `http://localhost:${port}/` + runModeSuffix(mode);\n  }\n\n  function createServer() {\n    const serve = serveStatic(appFolder(), { 'index': ['index.html'] });\n\n    return http.createServer((req, res) => {\n      serve(req, res, finalhandler(req, res));\n    });\n  }\n\n  function customPrompt() {\n    var promptResponse;\n    ipcMain.on('prompt', function(eventRet, arg) {\n      var encodeHtmlEntity = function(str) {\n        var buf = [];\n        for (var i=str.length-1;i>=0;i--) {\n          buf.unshift(['&#', str[i].charCodeAt(), ';'].join(''));\n        }\n        return buf.join('');\n      };\n      promptResponse = null\n      var promptWindow = new BrowserWindow({\n        width: 400,\n        height: 200,\n        show: false,\n        resizable: false,\n        movable: false,\n        alwaysOnTop: true,\n        frame: false\n      })\n      arg.val = arg.val || ''\n      const promptHtml = '<form><label for=\"val\">' + encodeHtmlEntity(arg.title) + '</label>\\\n      <input id=\"val\" value=\"' + arg.val + '\" autofocus />\\\n      <button type=\"submit\" onclick=\"require(\\'electron\\').ipcRenderer.send(\\'prompt-response\\', document.getElementById(\\'val\\').value);window.close()\">Ok</button>\\\n      <button type=\"cancel\" onclick=\"window.close()\">Cancel</button>\\\n      <style>body {font-family: sans-serif;} button {float:right; margin-left: 10px;} label,input {margin-bottom: 10px; width: 100%; display:block;}</style></form>'\n      promptWindow.loadURL('data:text/html,' + promptHtml)\n      promptWindow.show()\n      promptWindow.on('closed', function() {\n        eventRet.returnValue = promptResponse\n        promptWindow = null\n      })\n    })\n    ipcMain.on('prompt-response', function(event, arg) {\n      if (arg === ''){ arg = null }\n      promptResponse = arg\n    })\n  }\n\n  function createWindow(port) {\n    mainWindow = new BrowserWindow({\n      width: 1024,\n      height: 800,\n      icon: path.join(appFolder(), 'favicon.ico'),\n      title: runModeTitle(mode) + \" \" + `v${app.getVersion()}`,\n      webPreferences: {\n        nodeIntegration: true,\n        preload: preloadScript(),\n        webSecurity: false\n      }\n    });\n    mainWindow.loadURL(serverAddress(port));\n    mainWindow.maximize();\n    mainWindow.on('closed', () => mainWindow = null);\n    mainWindow.on('page-title-updated', (ev) => ev.preventDefault());\n    return mainWindow;\n  }\n\n  // Run the application\n  freeport((err, port) => {\n    if (err) throw err;\n    server.listen(port);\n    // Configure custom prompt\n    customPrompt()\n    // Configure electron app default actions\n    app.on('ready', () => {\n      globalShortcut.register('CommandOrControl+R', () => {\n        mainWindow.reload();\n      });\n      globalShortcut.register('CommandOrControl+Shift+R', () => {\n        mainWindow.webContents.reloadIgnoringCache();\n      });\n      globalShortcut.register('CommandOrControl+Shift+I', () => {\n        mainWindow.webContents.openDevTools();\n      });\n      mainWindow = createWindow(port)\n    });\n\n    app.on('window-all-closed', () => {\n      globalShortcut.unregister('CommandOrControl+R');\n      globalShortcut.unregister('CommandOrControl+Shift+R');\n      globalShortcut.unregister('CommandOrControl+Shift+I');\n      if (process.platform !== 'darwin') {\n        app.quit()\n      };\n    });\n\n    app.on('activate', () => {\n      if (mainWindow === null) { mainWindow = createWindow(port); }\n    });\n  })\n}\n\nmodule.exports = start\n"]}